import requests
import datetime
import os

# 定义基础配置文件的 URL
BASE_CONFIG_URL = "https://raw.githubusercontent.com/Johnshall/Shadowrocket-ADBlock-Rules-Forever/release/sr_top500_whitelist_ad.conf"

# 定义规则列表文件
RULE_LISTS = {
    "REJECT": "reject_lists.txt",
    "PROXY": "proxy_lists.txt",
    "DIRECT": "direct_lists.txt"
}

# 输出文件名
OUTPUT_FILE = "ultimate_edition.conf"

def fetch_content(url):
    """从 URL 获取文本内容"""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()  # 如果请求失败则抛出异常
        return response.text
    except requests.RequestException as e:
        print(f"Error fetching {url}: {e}")
        return None

def process_rule_list(filepath, policy):
    """处理单个规则列表文件，返回带策略的规则字符串"""
    expanded_rules = []
    if not os.path.exists(filepath):
        print(f"Warning: {filepath} not found. Skipping.")
        return ""
        
    with open(filepath, 'r') as f:
        urls = [line.strip() for line in f if line.strip() and not line.startswith('#')]

    for url in urls:
        print(f"Processing {url} for {policy} policy...")
        content = fetch_content(url)
        if content:
            rules = content.splitlines()
            for rule in rules:
                rule = rule.strip()
                if rule and not rule.startswith(('#', '[', '/')):
                    # 移除可能的注释
                    if '#' in rule:
                        rule = rule.split('#', 1)[0].strip()
                    # 确保规则不为空
                    if rule:
                        # 格式化规则，移除可能存在的策略并添加指定的策略
                        parts = rule.split(',')
                        # 假设规则格式为 DOMAIN-SUFFIX,example.com 或类似的格式
                        if len(parts) >= 2:
                            formatted_rule = f"{parts[0].strip()},{parts[1].strip()},{policy}"
                            expanded_rules.append(formatted_rule)

    return "\n".join(expanded_rules)

def main():
    print("Fetching base config...")
    base_config_content = fetch_content(BASE_CONFIG_URL)
    if not base_config_content:
        print("Failed to fetch base config. Aborting.")
        return

    # 按 REJECT, PROXY, DIRECT 的顺序处理规则
    print("\nProcessing rule lists...")
    reject_rules = process_rule_list(RULE_LISTS["REJECT"], "REJECT")
    proxy_rules = process_rule_list(RULE_LISTS["PROXY"], "PROXY")
    direct_rules = process_rule_list(RULE_LISTS["DIRECT"], "DIRECT")
    
    # 组合所有新规则
    all_new_rules = "\n".join(filter(None, [
        "# Custom Reject Rules", reject_rules,
        "# Custom Proxy Rules", proxy_rules,
        "# Custom Direct Rules", direct_rules
    ]))

    # 找到 [Rule] 标记的位置
    rule_section_marker = "[Rule]"
    marker_pos = base_config_content.find(rule_section_marker)

    if marker_pos == -1:
        print("Error: [Rule] section not found in base config. Aborting.")
        return

    # 在 [Rule] 下方插入新规则
    insertion_pos = base_config_content.find('\n', marker_pos) + 1
    final_config = (base_config_content[:insertion_pos] +
                    all_new_rules + "\n\n" +
                    base_config_content[insertion_pos:])

    # 更新配置文件顶部的构建时间
    build_time = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    final_config = f"# Ultimate Edition - Generated by GitHub Action\n# Build Time: {build_time}\n" + final_config

    # 写入最终文件
    with open(OUTPUT_FILE, 'w') as f:
        f.write(final_config)
        
    print(f"\nSuccessfully created {OUTPUT_FILE}")

if __name__ == "__main__":
    main()
